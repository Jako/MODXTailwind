{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MODXTailwind","text":"<p>Webpack 4 workflow for developing MODX templates using Tailwind CSS 3.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.x or 3.x</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Workflow for generating MODX templates on base of Tailwind CSS 3.</p> </li> <li> <p>Replace and generate tags needed in MODX templates.</p> </li> <li> <p>Purge the generated CSS on base of the found classes in the MODX templates,   chunks and content.</p> </li> </ul>"},{"location":"contributors/","title":"Contributors","text":"<p>The MODXTailwind project was started in 2022 by Thomas Jakobi. It was presented at the MODXpo 2022 as a workflow to create MODX Templates with Tailwind CSS 3.</p> <p>Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prepare-the-node-requirements","title":"Prepare the node requirements","text":"<p>The node modules must be installed using the <code>npm install</code> command.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#prepare-the-tailwind-template-files","title":"Prepare the Tailwind template files","text":"<p>To create MODX templates with MODXTailwind, you need to copy your Tailwind CSS template files to the <code>src</code> folder. The other template files must be copied to the following folders:</p> <ul> <li>The main javascript file must be located in <code>src/js/main.js</code>.</li> <li>The main stylesheet file must be located in <code>src/css/style.scss</code>.</li> <li>The images referenced in the templates must be located in <code>src/images</code></li> </ul> <p>If you need a different folder structure or filenames, you must change the folder references in <code>config/webpack.config.js</code> and in <code>config/webpack.loaders.js</code></p>"},{"location":"usage/#develop-the-modx-template-files","title":"Develop the MODX template files","text":"<p>The Webpack 4 workflow creates deployable MODX templates while developing the templates locally using the following commands:</p> <ul> <li> <p>Develop on the fly: <code>npm run start</code>. This command will build and serve the   templates on the fly. Each time you change the html, the css, the images etc.,   the local webserver server will refresh the browser.</p> </li> <li> <p>Prepare production: <code>npm run dist:modx</code>. This command will compile the MODX   templates and all used assets to folders used by MODX.</p> </li> <li> <p>Prepare production + full css: <code>npm run dist:dev_modx</code>. This command will do   the same. But it will compile a full css file with all possible Tailwind CSS   classes. This allows to develop the HTML chunks directly on server side.</p> </li> </ul> <p>After preparing the production templates, they can be synced with the online host or with a local MODX installation.</p>"},{"location":"usage/#webpack-build-helpers","title":"Webpack Build helpers","text":"<p>The included build helpers in <code>webpack.plugins.js</code> prepare the MODX templates:</p> <ul> <li> <p>Copy the src folder to src_modx to prepare the replacements.</p> </li> <li> <p>Don\u2019t use a hash in the generated assets because this can be different with   each compilation.</p> </li> <li> <p>Use ChecksumFile for cache busting, because the checksum is generated server   side by MODX.</p> </li> <li> <p>Replace the partial includes with MODX tags i.e. <code>[[$partials.header]]</code>. The   partials must be created as MODX chunks afterwards.</p> </li> <li> <p>Prepare the title tag with MODX placeholders. The title tag can be changed in   the setTitle method in <code>webpack.plugins.html</code>.</p> </li> <li> <p>Add a base tag with <code>href=\"[[!++site_url]]\"</code>.</p> </li> <li> <p>Move the generated html templates to a folder that can be referenced by the   <code>static_elements_basepath</code> MODX system setting.</p> </li> </ul>"},{"location":"usage/#modx-extras-and-modx-system-settings","title":"MODX extras and MODX system settings","text":"<ul> <li> <p>ChecksumFile.</p> </li> <li> <p>TailwindHelper.</p> </li> <li> <p>Fill the static_elements_basepath setting with   <code>core/components/modxtailwind/elements</code> (optional).</p> </li> <li> <p>Enable the <code>setting_static_elements_automate_templates</code> setting (optional).</p> </li> </ul>"},{"location":"usage/#get-used-css-classes-with-tailwindhelper","title":"Get used CSS classes with TailwindHelper","text":"<ul> <li> <p>TailwindHelper uses an entry in the Extras menu.</p> </li> <li> <p>It collects all used CSS classes in chunks, templates and the content field.   That way it works well with ContentBlocks.</p> </li> <li> <p>The result is written to a safelist.json. The location of this file can be set   by MODX system settings.</p> </li> <li> <p>Run TailwindHelper on your MODX installation and copy the generated safelist.json   into the config/tailwindhelper folder of MODXTailwind. After this you are able   to compile an optimised stylesheet for your site.</p> </li> </ul>"},{"location":"usage/#rules-for-css-classes-in-the-tailwind-css-templates","title":"Rules for CSS Classes in the Tailwind CSS templates","text":"<ul> <li> <p>Don\u2019t construct class names dynamically: <code>&lt;div class=\"text-[[+error:notempty=`red`:default=`green`]]\"&gt;&lt;/div&gt;</code></p> </li> <li> <p>Use class names (only) in <code>notempty|default|then|else</code> modifiers (and their alternatives): <code>&lt;div class=\"[[+error:notempty=`text-red`:default=`text-green`]]\"&gt;&lt;/div&gt;</code></p> </li> <li> <p>Use full class tags in MODX tags <code>&lt;div [[+error:notempty=`class=\"text-red\"`:default=`class=\"text-green\"`]]&gt;&lt;/div&gt;</code></p> </li> </ul>"},{"location":"usage/#ideas-for-future-improvements","title":"Ideas for future improvements","text":"<p>Sadly this workflow does not work automatic on server side. But the workflow can be improved inside of MODX:</p> <ul> <li>New menu entry in TailwindHelper: Purge the full CSS with the safelist.json</li> <li>New option in MinifyX: Purge the full CSS with the safelist.json</li> </ul>"}]}