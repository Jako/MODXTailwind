{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MODXTailwind Webpack 4 workflow for developing MODX templates using Tailwind CSS 3. Requirements MODX Revolution 2.x or 3.x Features Workflow for generating MODX templates on base of Tailwind CSS 3. Replace and generate tags needed in MODX templates. Purge the generated CSS on base of the found classes in the MODX templates, chunks and content.","title":"Description"},{"location":"#modxtailwind","text":"Webpack 4 workflow for developing MODX templates using Tailwind CSS 3.","title":"MODXTailwind"},{"location":"#requirements","text":"MODX Revolution 2.x or 3.x","title":"Requirements"},{"location":"#features","text":"Workflow for generating MODX templates on base of Tailwind CSS 3. Replace and generate tags needed in MODX templates. Purge the generated CSS on base of the found classes in the MODX templates, chunks and content.","title":"Features"},{"location":"contributors/","text":"The MODXTailwind project was started in 2022 by Thomas Jakobi . It was presented at the MODXpo 2022 as a workflow to create MODX Templates with Tailwind CSS 3. Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.","title":"Contributors"},{"location":"installation/","text":"Prepare the node requirements The node modules must be installed using the npm install command.","title":"Installation"},{"location":"installation/#prepare-the-node-requirements","text":"The node modules must be installed using the npm install command.","title":"Prepare the node requirements"},{"location":"usage/","text":"Prepare the Tailwind template files To generate MODX Templates with MODXTailwind you have to copy your Tailwind CSS template files to the src folder. The other template files have to be copied to the followin folders: The main javascript file has to be located in src/js/main.js . The main stylesheet file has to be located in src/css/style.scss . The images referenced in the templates have to be located in src/images If you need a different folder structure or filenames, you have to change the folder references in config/webpack.config.js and in config/webpack.loaders.js Develop the MODX template files The Webpack 4 workflow creates deployable MODX templates while developing the templates locally using the following commands: Develop on the fly: npm run start . This command will build and serve the templates on the fly. Each time you change the html, the css, the images etc., the local webserver server will refresh the browser. Prepare production: npm run dist:modx . This command will compile the MODX templates and all used assets to folders used by MODX. Prepare production + full css: npm run dist:dev_modx . This command will do the same. But it will compile a full css file with all possible Tailwind CSS classes. This allows to develop the HTML chunks directly on server side. After preparing the production templates, they can be synced with the online host or with a local MODX installation. Webpack Build helpers The included build helpers in webpack.plugins.js prepare the MODX templates: Copy the src folder to src_modx to prepare the replacements. Don\u2019t use a hash in the generated assets because this can be different with each compilation. Use ChecksumFile for cache busting, because the checksum is generated server side by MODX. Replace the partial includes with MODX tags i.e. [[$partials.header]] . The partials have to be created as MODX chunks afterwards. Prepare the title tag with MODX placeholders. The title tag can be changed in the setTitle method in webpack.plugins.html . Add a base tag with href=\"[[!++site_url]]\" . Move the generated html templates to a folder that can be referenced by the static_elements_basepath MODX system setting. MODX extras and MODX system settings ChecksumFile . TailwindHelper . Fill the static_elements_basepath setting with core/components/modxtailwind/elements (optional). Enable the setting_static_elements_automate_templates setting (optional). Get used CSS classes with TailwindHelper TailwindHelper uses an entry in the Extras menu. It collects all used CSS classes in chunks, templates and the content field. That way it works well with ContentBlocks. The result is written to a safelist.json. The location of this file can be set by MODX system settings. Run TailwindHelper on your MODX installation and copy the generated safelist.json into the config/tailwindhelper folder of MODXTailwind. After this you are able to compile an optimised stylesheet for your site. Rules for CSS Classes in the Tailwind CSS templates Don\u2019t construct class names dynamically: <div class=\"text-[[+error:notempty=`red`:default=`green`]]\"></div> Use class names (only) in notempty|default|then|else modifiers (and their alternatives): <div class=\"[[+error:notempty=`text-red`:default=`text-green`]]\"></div> Use full class tags in MODX tags <div [[+error:notempty=`class=\"text-red\"`:default=`class=\"text-green\"`]]></div> Ideas for future improvements Sadly this workflow does not work automatic on server side. But the workflow can be improved inside of MODX: New menu entry in TailwindHelper: Purge the full CSS with the safelist.json New option in MinifyX: Purge the full CSS with the safelist.json","title":"Usage"},{"location":"usage/#prepare-the-tailwind-template-files","text":"To generate MODX Templates with MODXTailwind you have to copy your Tailwind CSS template files to the src folder. The other template files have to be copied to the followin folders: The main javascript file has to be located in src/js/main.js . The main stylesheet file has to be located in src/css/style.scss . The images referenced in the templates have to be located in src/images If you need a different folder structure or filenames, you have to change the folder references in config/webpack.config.js and in config/webpack.loaders.js","title":"Prepare the Tailwind template files"},{"location":"usage/#develop-the-modx-template-files","text":"The Webpack 4 workflow creates deployable MODX templates while developing the templates locally using the following commands: Develop on the fly: npm run start . This command will build and serve the templates on the fly. Each time you change the html, the css, the images etc., the local webserver server will refresh the browser. Prepare production: npm run dist:modx . This command will compile the MODX templates and all used assets to folders used by MODX. Prepare production + full css: npm run dist:dev_modx . This command will do the same. But it will compile a full css file with all possible Tailwind CSS classes. This allows to develop the HTML chunks directly on server side. After preparing the production templates, they can be synced with the online host or with a local MODX installation.","title":"Develop the MODX template files"},{"location":"usage/#webpack-build-helpers","text":"The included build helpers in webpack.plugins.js prepare the MODX templates: Copy the src folder to src_modx to prepare the replacements. Don\u2019t use a hash in the generated assets because this can be different with each compilation. Use ChecksumFile for cache busting, because the checksum is generated server side by MODX. Replace the partial includes with MODX tags i.e. [[$partials.header]] . The partials have to be created as MODX chunks afterwards. Prepare the title tag with MODX placeholders. The title tag can be changed in the setTitle method in webpack.plugins.html . Add a base tag with href=\"[[!++site_url]]\" . Move the generated html templates to a folder that can be referenced by the static_elements_basepath MODX system setting.","title":"Webpack Build helpers"},{"location":"usage/#modx-extras-and-modx-system-settings","text":"ChecksumFile . TailwindHelper . Fill the static_elements_basepath setting with core/components/modxtailwind/elements (optional). Enable the setting_static_elements_automate_templates setting (optional).","title":"MODX extras and MODX system settings"},{"location":"usage/#get-used-css-classes-with-tailwindhelper","text":"TailwindHelper uses an entry in the Extras menu. It collects all used CSS classes in chunks, templates and the content field. That way it works well with ContentBlocks. The result is written to a safelist.json. The location of this file can be set by MODX system settings. Run TailwindHelper on your MODX installation and copy the generated safelist.json into the config/tailwindhelper folder of MODXTailwind. After this you are able to compile an optimised stylesheet for your site.","title":"Get used CSS classes with TailwindHelper"},{"location":"usage/#rules-for-css-classes-in-the-tailwind-css-templates","text":"Don\u2019t construct class names dynamically: <div class=\"text-[[+error:notempty=`red`:default=`green`]]\"></div> Use class names (only) in notempty|default|then|else modifiers (and their alternatives): <div class=\"[[+error:notempty=`text-red`:default=`text-green`]]\"></div> Use full class tags in MODX tags <div [[+error:notempty=`class=\"text-red\"`:default=`class=\"text-green\"`]]></div>","title":"Rules for CSS Classes in the Tailwind CSS templates"},{"location":"usage/#ideas-for-future-improvements","text":"Sadly this workflow does not work automatic on server side. But the workflow can be improved inside of MODX: New menu entry in TailwindHelper: Purge the full CSS with the safelist.json New option in MinifyX: Purge the full CSS with the safelist.json","title":"Ideas for future improvements"}]}